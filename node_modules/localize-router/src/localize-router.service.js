import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { Subject } from 'rxjs/Subject';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/forkJoin';
import { LocalizeParser } from './localize-router.parser';
/**
 * Localization service
 * modifyRoutes
 */
export var LocalizeRouterService = (function () {
    /**
     * CTOR
     * @param parser
     * @param router
     */
    function LocalizeRouterService(parser, router) {
        this.parser = parser;
        this.router = router;
        this.routerEvents = new Subject();
    }
    /**
     * Start up the service
     */
    LocalizeRouterService.prototype.init = function () {
        this.router.resetConfig(this.parser.routes);
        this.router.events.subscribe(this._routeChanged());
    };
    /**
     * Change language and navigate to translated route
     * @param lang
     */
    LocalizeRouterService.prototype.changeLanguage = function (lang) {
        var _this = this;
        if (lang !== this.parser.currentLang) {
            var rootSnapshot_1 = this.router.routerState.snapshot.root;
            this.parser.translateRoutes(lang).subscribe(function () {
                _this.router.navigateByUrl(_this.traverseRouteSnapshot(rootSnapshot_1));
            });
        }
    };
    /**
     * Traverses through the tree to assemble new translated url
     * @param snapshot
     * @returns {string}
     */
    LocalizeRouterService.prototype.traverseRouteSnapshot = function (snapshot) {
        if (snapshot.firstChild && snapshot.firstChild.routeConfig && snapshot.firstChild.routeConfig.path) {
            return this.parseSegmentValue(snapshot) + '/' + this.traverseRouteSnapshot(snapshot.firstChild);
        }
        return this.parseSegmentValue(snapshot);
    };
    /**
     * Extracts new segment value based on routeConfig and url
     * @param snapshot
     * @returns {any}
     */
    LocalizeRouterService.prototype.parseSegmentValue = function (snapshot) {
        if (snapshot.routeConfig) {
            var subPathSegments = snapshot.routeConfig.path.split('/');
            return subPathSegments.
                map(function (s, i) { return s.indexOf(':') === 0 ? snapshot.url[i].path : s; }).
                join('/');
        }
        return '';
    };
    /**
     * Translate route to current language
     * If new language is explicitly provided then replace language part in url with new language
     * @param path
     * @returns {Observable<string>}
     */
    LocalizeRouterService.prototype.translateRoute = function (path) {
        var _this = this;
        if (typeof path === 'string') {
            var result = this.parser.translateRoute(path);
            return !path.indexOf('/') ?
                "/" + this.parser.currentLang + result :
                result;
        }
        else {
            var result_1 = [];
            path.forEach(function (segment, index) {
                if (typeof segment === 'string') {
                    var res = _this.parser.translateRoute(segment);
                    if (!index && !segment.indexOf('/')) {
                        result_1.push("/" + _this.parser.currentLang + res);
                    }
                    else {
                        result_1.push(res);
                    }
                }
                else {
                    result_1.push(segment);
                }
            });
            return result_1;
        }
    };
    /**
     * Event handler to react on route change
     * @returns {(event:any)=>undefined}
     * @private
     */
    LocalizeRouterService.prototype._routeChanged = function () {
        var _this = this;
        var self = this;
        return function (event) {
            var lang = _this.parser.getLocationLang(event.url);
            if (event instanceof NavigationStart && lang && lang !== _this.parser.currentLang) {
                _this.parser.translateRoutes(lang).subscribe(function () {
                    // Fire route change event
                    _this.routerEvents.next(lang);
                });
            }
            // This value does not exist in Router before version 4
            // so we have to find it indirectly
            if (event.toString().match(/RouteConfigLoadEnd/)) {
                Observable.of(event.route).toPromise().then(function (route) {
                    self.parser.initChildRoutes(route._loadedConfig.routes);
                });
            }
        };
    };
    LocalizeRouterService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocalizeRouterService.ctorParameters = function () { return [
        { type: LocalizeParser, },
        { type: Router, },
    ]; };
    return LocalizeRouterService;
}());
