import { Pipe, Injectable, ChangeDetectorRef } from '@angular/core';
import { LocalizeRouterService } from './localize-router.service';
import 'rxjs/add/observable/forkJoin';
import { equals } from './util';
export var LocalizeRouterPipe = (function () {
    /**
     * CTOR
     * @param localize
     * @param _ref
     */
    function LocalizeRouterPipe(localize, _ref) {
        var _this = this;
        this.localize = localize;
        this._ref = _ref;
        this.value = '';
        this.subscription = this.localize.routerEvents.subscribe(function () {
            _this.transform(_this.lastKey);
        });
    }
    /**
     * Transform current url to localized one
     * @param query
     * @returns {string}
     */
    LocalizeRouterPipe.prototype.transform = function (query) {
        if (!query || query.length === 0 || !this.localize.parser.currentLang) {
            return query;
        }
        if (equals(query, this.lastKey) && equals(this.lastLanguage, this.localize.parser.currentLang)) {
            return this.value;
        }
        this.lastKey = query;
        this.lastLanguage = this.localize.parser.currentLang;
        /** translate key and update values */
        this.value = this.localize.translateRoute(query);
        this.lastKey = query;
        this._ref.markForCheck();
        return this.value;
    };
    LocalizeRouterPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'localize',
                    pure: false // required to update the value when the promise is resolved
                },] },
    ];
    /** @nocollapse */
    LocalizeRouterPipe.ctorParameters = function () { return [
        { type: LocalizeRouterService, },
        { type: ChangeDetectorRef, },
    ]; };
    return LocalizeRouterPipe;
}());
