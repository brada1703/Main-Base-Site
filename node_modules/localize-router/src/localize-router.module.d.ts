import { ModuleWithProviders, Provider, OpaqueToken, Injector } from '@angular/core';
import { Http } from '@angular/http';
import { LocalizeParser, StaticParserLoader } from './localize-router.parser';
import { Routes } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { Location } from '@angular/common';
export declare const LOCALIZE_ROUTER_FORROOT_GUARD: OpaqueToken;
/**
 * Helper function for loading external parser
 * @param translate
 * @param location
 * @param http
 * @returns {StaticParserLoader}
 */
export declare function localizeLoaderFactory(translate: TranslateService, location: Location, http: Http): StaticParserLoader;
export declare class ParserInitializer {
    private injector;
    parser: LocalizeParser;
    routes: Routes;
    constructor(injector: Injector);
    appInitializer(): Promise<any>;
    generateInitializer(parser: LocalizeParser, routes: Routes[]): () => Promise<any>;
}
export declare function getAppInitializer(p: ParserInitializer, parser: LocalizeParser, routes: Routes[]): any;
export declare class LocalizeRouterModule {
    static forRoot(routes: Routes, localizeLoader?: Provider): ModuleWithProviders;
    static forChild(routes: Routes): ModuleWithProviders;
}
export declare function provideForRootGuard(localizeRouterModule: LocalizeRouterModule): any;
