import { NgModule, APP_INITIALIZER, OpaqueToken, Optional, SkipSelf, Injectable, Injector } from '@angular/core';
import { HttpModule, Http } from '@angular/http';
import { LocalizeRouterService } from './localize-router.service';
import { LocalizeParser, RAW_ROUTES, StaticParserLoader } from './localize-router.parser';
import { RouterModule } from '@angular/router';
import { LocalizeRouterPipe } from './localize-router.pipe';
import { TranslateModule, TranslateService } from '@ngx-translate/core';
import { Location, CommonModule } from '@angular/common';
export var LOCALIZE_ROUTER_FORROOT_GUARD = new OpaqueToken('LOCALIZE_ROUTER_FORROOT_GUARD');
/**
 * Helper function for loading external parser
 * @param translate
 * @param location
 * @param http
 * @returns {StaticParserLoader}
 */
export function localizeLoaderFactory(translate, location, http) {
    return new StaticParserLoader(translate, location, http);
}
export var ParserInitializer = (function () {
    function ParserInitializer(injector) {
        this.injector = injector;
    }
    ParserInitializer.prototype.appInitializer = function () {
        var _this = this;
        var res = this.parser.load(this.routes);
        res.then(function () {
            var localize = _this.injector.get(LocalizeRouterService);
            localize.init();
        });
        return res;
    };
    ParserInitializer.prototype.generateInitializer = function (parser, routes) {
        this.parser = parser;
        this.routes = routes.reduce(function (a, b) { return a.concat(b); });
        return this.appInitializer;
    };
    ParserInitializer.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ParserInitializer.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return ParserInitializer;
}());
export function getAppInitializer(p, parser, routes) {
    return p.generateInitializer(parser, routes).bind(p);
}
export var LocalizeRouterModule = (function () {
    function LocalizeRouterModule() {
    }
    // static Localize: LocalizeParser;
    //
    // constructor(@Inject(LocalizeParser) localize: LocalizeParser) {
    //   if (localize && !LocalizeRouterModule.Localize) {
    //     LocalizeRouterModule.Localize = localize;
    //   }
    // }
    LocalizeRouterModule.forRoot = function (routes, localizeLoader) {
        if (localizeLoader === void 0) { localizeLoader = {
            provide: LocalizeParser,
            useFactory: localizeLoaderFactory,
            deps: [TranslateService, Location, Http]
        }; }
        return {
            ngModule: LocalizeRouterModule,
            providers: [
                {
                    provide: LOCALIZE_ROUTER_FORROOT_GUARD,
                    useFactory: provideForRootGuard,
                    deps: [[LocalizeRouterModule, new Optional(), new SkipSelf()]]
                },
                {
                    provide: RAW_ROUTES,
                    multi: true,
                    useValue: routes
                },
                localizeLoader,
                LocalizeRouterService,
                ParserInitializer,
                {
                    provide: APP_INITIALIZER,
                    multi: true,
                    useFactory: getAppInitializer,
                    deps: [ParserInitializer, LocalizeParser, RAW_ROUTES]
                }
            ]
        };
    };
    LocalizeRouterModule.forChild = function (routes) {
        return {
            ngModule: LocalizeRouterModule,
            providers: [
                {
                    provide: RAW_ROUTES,
                    multi: true,
                    // useValue: LocalizeRouterModule.Localize ?
                    //   LocalizeRouterModule.Localize.initChildRoutes(routes) :
                    //   routes
                    useValue: routes
                }
            ]
        };
    };
    LocalizeRouterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [HttpModule, CommonModule, RouterModule, TranslateModule],
                    declarations: [LocalizeRouterPipe],
                    exports: [LocalizeRouterPipe]
                },] },
    ];
    /** @nocollapse */
    LocalizeRouterModule.ctorParameters = function () { return []; };
    return LocalizeRouterModule;
}());
export function provideForRootGuard(localizeRouterModule) {
    if (localizeRouterModule) {
        throw new Error("LocalizeRouterModule.forRoot() called twice. Lazy loaded modules should use LocalizeRouterModule.forChild() instead.");
    }
    return 'guarded';
}
