import { Http } from '@angular/http';
import { OpaqueToken } from '@angular/core';
import { Routes, Route } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs/Observable';
import { Location } from '@angular/common';
import 'rxjs/add/observable/forkJoin';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/share';
/**
 * Static provider for keeping track of routes
 * @type {OpaqueToken}
 */
export declare const RAW_ROUTES: OpaqueToken;
/**
 * Config interface
 */
export interface ILocalizeRouteConfig {
    locales: Array<string>;
    prefix: string;
}
/**
 * Abstract class for parsing localization
 */
export declare abstract class LocalizeParser {
    private translate;
    private location;
    locales: Array<string>;
    currentLang: string;
    routes: Routes;
    defaultLang: string;
    protected prefix: string;
    private translationObject;
    /**
     * Loader constructor
     * @param translate
     * @param location
     */
    constructor(translate: TranslateService, location: Location);
    /**
     * Load routes and fetch necessary data
     * @param routes
     */
    abstract load(routes: Routes): Promise<any>;
    /**
     * Initialize language and routes
     * @param routes
     * @returns {Promise<any>}
     */
    protected init(routes: Routes): Promise<any>;
    initChildRoutes(routes: Routes): Route[];
    /**
     * Translate routes to selected language
     * @param language
     * @returns {Promise<any>}
     */
    translateRoutes(language: string): Observable<any>;
    /**
     * Translate the route node and recursively call for all it's children
     * @param routes
     * @returns {Promise<any>}
     * @private
     */
    private _translateRouteTree(routes);
    /**
     * Translate property and if first time add original to cache
     * @param route
     * @param property
     * @param prefixLang
     * @private
     */
    private _translateProperty(route, property, prefixLang?);
    /**
     * Translate route and return observable
     * @param path
     * @returns {string}
     */
    translateRoute(path: string): string;
    /**
     * Get language from url
     * @returns {any}
     * @private
     */
    getLocationLang(url?: string): string;
    /**
     * Get user's language set in the browser
     * @returns {any}
     * @private
     */
    private _getBrowserLang();
    /**
     * Get language from local storage
     * @returns {string}
     * @private
     */
    /**
     * Save language to local storage
     * @param value
     * @private
     */
    private _cachedLang;
    private _returnIfInLocales(value);
    private translateText(key);
}
/**
 * Manually set configuration
 */
export declare class ManualParserLoader extends LocalizeParser {
    /**
     * CTOR
     * @param translate
     * @param location
     * @param locales
     * @param prefix
     */
    constructor(translate: TranslateService, location: Location, locales?: Array<string>, prefix?: string);
    /**
     * Initialize or append routes
     * @param routes
     */
    load(routes: Routes): Promise<any>;
}
/**
 * Load configuration from server
 */
export declare class StaticParserLoader extends LocalizeParser {
    private http;
    private path;
    private _dataLoaded;
    /**
     * CTOR
     * @param translate
     * @param location
     * @param http
     * @param path
     */
    constructor(translate: TranslateService, location: Location, http: Http, path?: string);
    /**
     * Initialize or append routes
     * @param routes
     */
    load(routes: Routes): Promise<any>;
}
